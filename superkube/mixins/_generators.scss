// =Generators


@mixin generate-with-states($map) {
    @include generate($map, true);
}
@mixin generate($map, $states: false) {
    @each $key, $value in $map {
        @if $key == default {
            @include generate-item($value, $key, $states);
        }
        @else {
            &-#{$key} {
                @include generate-item($value, $key, $states);
            }
        }
    }
}
@mixin generate-item($obj, $key, $states) {
    @if ($states == false) {
        @each $key, $value in $obj {
            @if $key != close {
                #{$key}: #{$value};
            }
        }
    }
    @else {
        @each $key, $value in $obj {
            @if $key == base {
                @include generate-item-state($value);
            }
            @else if $key == hover {
                &:hover,
                &:focus {
                    @include generate-item-state($value);
                }
            }
            @else if $key == disabled {
                &:disabled {
                    @include generate-item-state($value);
                }
            }
            @else {
                @include generate-item-state($value);
            }
        }
    }
}
@mixin generate-item-state($obj) {
    @each $key, $value in $obj {
        @if ($key == background-color) {
            @include background-gradient($value);
        }
        @else if ($key == box-shadow and type-of($value) == 'map') {
            $str: '';
            $z: 0;
            @each $k, $v in $value {
                $z: $z + 1;
                $glue: ', ';
                @if ($z == length($value)) {
                    $glue: '';
                }
                $str: $str + $v + $glue;
            }
            #{$key}: #{$str};
        }
        @else if $key != close {
            #{$key}: $value;
        }
    }
}
@mixin generate-scale($map) {
    @each $key, $obj in $map {
        @if $key == regular {
             @include generate-scale-item($obj);
        }
        @else {
            &-#{$key} {
                @include generate-scale-item($obj);
            }
        }
    }
}
@mixin generate-scale-item($obj) {
    @each $objkey, $objvalue in $obj {
        #{$objkey}: $objvalue;
    }
}

// close generator
@mixin generate-close-with-states($map, $size, $weight, $scale: 100%) {
    @include generate-close($map, $size, $weight, $scale, true);
}
@mixin generate-close($map, $size, $weight, $scale: 100%, $states: false) {

    .close {
        @include close($size, $weight, #000, $scale);
    }

    @each $key, $value in $map {
        @if $key == default {
            .close {
                @include generate-close-item($value, $states);
            }
        }
        @else {
            &-#{$key} {
                .close {
                    @include generate-close-item($value, $states);
                }
            }
        }
    }
}
@mixin generate-close-item($objvalue, $states) {
    @if ($states == false) {
        @include generate-close-background($objvalue, $states);
        @include close-color(get-close-color($objvalue, $states));
    }
    @else {
        @each $state, $obj in $objvalue {
            @if $state == base {
                @include generate-close-background($obj, $state);
                @include close-color(get-close-color($obj, $state));
            }
            @else if $state == hover {
                &:hover,
                &:focus {
                    @include generate-close-background($obj, $state);
                    @include close-color(get-close-color($obj, $state));
                }
            }
            @else if $state == disabled {
                &:disabled {
                    @include generate-close-background($obj, $state);
                    @include close-color(get-close-color($obj, $state));
                }
            }
            @else {
                @include generate-close-background($obj, $states);
                @include close-color(get-close-color($obj, $states));
            }
        }
    }
}
@mixin generate-close-background($obj, $states: false) {
    @if (map-get($obj, close) and map-deep-get($obj, close, background-color)) {
        background-color: map-deep-get($obj, close, background-color);
    }
}

// colors
@mixin generate-colors($colors) {
    @each $name, $map in $colors {
        @if type-of($map) == map {
            @include split-color-to-var($name, $map);
        }
        @else {
            @if length($map) > 0 {
                --c-#{$name}: #{$map};
            }
        }
    }
}
@mixin split-color-to-var($sel, $map) {
    @each $key, $value in $map {
        @if type-of($value) == map {
            @include split-color-to-var(#{$sel}-#{$key}, $value);
        }
        @else {
            --c-#{$sel}-#{$key}: #{$value};
        }
    }
}


// base headings
@mixin generate-base-headings($map, $breakpoint) {
    @if map-has-key($map, base) {
        $headings: h1, h2, h3, h4, h5, h6;
        $obj: map-deep-get($map, base);
        @each $key, $val in $headings {
            @if map-has-key($obj, $key) {
                #{$key} {
                    font-size: type-size(base, $key, $breakpoint);
                    line-height: type-line(base, $key, $breakpoint);
                }
            }
        }
    }
}

// links
@mixin generate-links {
    $obj: map-get($colors, link);
    @each $key, $val in $obj {
        @if ($key != default and type-of($val) == 'map') {
            &-#{$key} {
                color: color(link, $key, base);
                &:hover {
                    @include transition;
                    color: color(link, $key, hover);
                }
            }
        }
    }
}

// text
@mixin generate-text-colors {
    $obj: map-get($colors, text);
    @each $key, $val in $obj {
        @if ($key != default) {
            &-#{$key} {
                color: color(text, $key);
            }
        }
    }
}
@mixin generate-text-size($map, $breakpoint) {
    $obj: map-get($map, text);
    @each $key, $val in $obj {
        @if (type-of($val) == 'list') {
            &-#{$key} {
                font-size: type-size(text, $key, $breakpoint);
                line-height: type-line(text, $key, $breakpoint);
            }
            @if (length($val) == 3) {
                &-#{$key}-alt {
                    font-size: type-size(text, $key, $breakpoint);
                    line-height: type-line-alt(text, $key, $breakpoint);
                }
            }
        }
    }
}

// heading
@mixin generate-heading-colors {
    $obj: map-get($colors, heading);
    @each $key, $val in $obj {
        @if ($key != default) {
            &-#{$key} {
                color: color(heading, $key);
            }
        }
    }
}
@mixin generate-heading-size($map, $breakpoint) {
    $obj: map-get($map, heading);
    @each $key, $val in $obj {
        @if (type-of($val) == 'list') {
            &-#{$key} {
                font-size: type-size(heading, $key, $breakpoint);
                line-height: type-line(heading, $key, $breakpoint);
            }
            @if (length($val) == 3) {
                &-#{$key}-alt {
                    font-size: type-size(heading, $key, $breakpoint);
                    line-height: type-line-alt(heading, $key, $breakpoint);
                }
            }
        }
    }
}